<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这里藏着好多东西</title>
    <link href="/2022/01/23/%E7%A7%98%E5%AF%86/"/>
    <url>/2022/01/23/%E7%A7%98%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 不要试图进入这里" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2eddb86118d22f7f2436bf26880c5364cf0ff0ef148b1d930e8b2541ce4206ae">84ce08a5f22082394108c3d0e70cdd28c91acf1c6cc313fbcd29dd38d7b488854f68002c9c2ee537f05c28effc3b4c69d9eed40322f62d4ac981a51fd9ffba15a3f5e4174135b6047ae1fa0e7023033695e95fc18e880cc718758867edd5af9b0691b660ddc4a423c0bcca6da3098af3d86b634cc07e7a94c7dc4640feb9b47b5dbf41cd471bf28d241fd4611b460babb04c5555d8278bcd7d144ea993958ca2f0abf47730adf243436fdee0a6c3dd475836d2162bcc46d61a3bad8228ca9b1e6415ebfde8b84638ba7344d317cf8a8b9b9a0446b73f8dc269728a93d169ec83cdff691415d99b97d3c4c9379438b0819112f4235458505d2bb2cc03672794832eaf7fd7329b13097d11dfaae5dbb84c98be1fcef9c92575a1b58a1865c26b06322ca7ab39281b0907dea0584e806831241943e7a4b911aba79f53c86bed41f5978e549c3a1924f86454458fee161f827beb109cf201a2d09830b9d7fb8585231365a3a4c0ad546cfe9f5a8bdfb94ac4c6c2dce9f23ebf09a8ae86675db8478f6a5ec14bdf101dd6b4a8ba0f09c4b7b6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不要试图进入这里</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>小秘密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>秘密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合概述</title>
    <link href="/2022/01/22/Java%E9%9B%86%E5%90%88/"/>
    <url>/2022/01/22/Java%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>Loading……为了防止以后被迫进入开发岗做码农，希望有零碎时间就可以看看Java各种。</p> <span id="more"></span><hr><p>相比于C++ STL来说，Java的集合架构给我的感觉是更有条理。连源码看起来都很好看（还没到深入源码的地步），感觉自己的编码风格都要受到影响了   :-(</p><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Java中的两大接口Collection，Map</p><p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201211508789.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201211509584.png" alt="image-20220121150955536"></p><h1 id="二、Collection接口"><a href="#二、Collection接口" class="headerlink" title="二、Collection接口"></a>二、Collection接口</h1><p>Collection接口没有直接实现的子类。但其子接口List或者Set有直接实现类。</p><p>Collection接口规定了一些简单的方法，并没有指明具体的存储结构，因此不提供取元素等方法(如get()、indexOf())</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><blockquote><ul><li><p>add remove contains size isEmpty clear</p></li><li><p>addAll containsAll removeAll</p><blockquote><p>*All方法的参数必须是实现了Collection接口的对象。</p></blockquote></li></ul></blockquote><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>Collection接口继承自Iterable接口，所以可以通过迭代器Iterator遍历。</p><p>迭代器有hasNext()与next()方法</p><blockquote><p>顾名思义</p><p>不过要注意的是，调用next()前记得调用hasNext()方法，否则可能会抛出NoSuchElementException异常</p></blockquote><p>通过调用Collection接口的iterator()方法，获得集合迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Collection&lt;Integer&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    list.add(<span class="hljs-number">3</span>);<br>    list.add(<span class="hljs-number">4</span>);<br>    list.add(<span class="hljs-number">1</span>);<br>    list.add(<span class="hljs-number">5</span>);<br><br>    Iterator iterator = list.iterator();<br>    <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>        System.out.println(iterator.next());<br>    &#125;<br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以通过增强for循环去遍历。</p><h1 id="三、List接口"><a href="#三、List接口" class="headerlink" title="三、List接口"></a>三、List接口</h1><p>List接口的实现类有一些特点：</p><ul><li>集合中元素有序（添加顺序与取出顺序一致）。</li><li>可以存在重复元素。</li><li>每个元素都有对应的顺序索引，可以通过get方法返回</li></ul><h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><p>除Collection提供的方法外(有一些重载，如add()，由于指明了具体的存储结构，因此可以在指定index处add了)，还有一些新增方法：</p><ul><li><p>get()</p></li><li><p>indexOf()、lastIndexOf()</p><blockquote><p>c++没有欸</p></blockquote></li></ul><h2 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h2><ul><li>增强for</li><li>由于List是Collection的子接口，因此可以使用Iterator遍历</li><li>通过索引</li></ul><h2 id="三个主要的实现类"><a href="#三个主要的实现类" class="headerlink" title="三个主要的实现类"></a>三个主要的实现类</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li><p>基于数组实现</p></li><li><p>存储元素的数组为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Object[] elementData;<br></code></pre></td></tr></table></figure><blockquote><p>transient修饰词以后再看吧</p></blockquote></li><li><p>线程不安全</p></li><li><p>扩容机制与STL的Vector有一点不同，ArrayList每次扩容为原容量1.5倍</p></li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li>基于数组实现</li><li>线程安全，方法使用synchronized修饰</li><li>扩容机制与STL的Vector一致，2倍扩容。</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>底层实现了双向链表和双端队列的特点</li><li>线程不安全</li></ul><h1 id="四、Set接口"><a href="#四、Set接口" class="headerlink" title="四、Set接口"></a>四、Set接口</h1><p>Set接口的实现类的特点：</p><ul><li><p>元素无序，不能通过索引访问</p></li><li><p>不允许有重复元素</p><blockquote><p>因此对于自定义类型，需要重写hashCode与equal方法</p></blockquote></li><li><p>可以通过迭代器遍历</p></li></ul><h2 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h2><ul><li>Set接口是Collection接口的子接口。</li></ul><h2 id="实现类："><a href="#实现类：" class="headerlink" title="实现类："></a>实现类：</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>有趣的是，若我们执行下面的语句构造一个HashSet对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; s = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br></code></pre></td></tr></table></figure><p>在HashSet的构造方法源码中，实际上构造了一个HashMap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HashSet</span><span class="hljs-params">()</span> </span>&#123;<br>    map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以通过add方法的返回值判断要添加的元素是否已经存在于HashSet中了</li><li>与C++ unordered_set类似</li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul><li>与C++ set类似</li><li>有序。</li></ul><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><ul><li>是HashSet的子类</li><li>底层是一个LinkedHashMap，额外维护了一个数组与双向链表</li><li>从而使元素看起来是以插入顺序保存的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Loading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Loading~</title>
    <link href="/2022/01/21/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    <url>/2022/01/21/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0aa879c963eaad80ba895ea3d1c4b63da14bfc55e4604fe84c89c806cbc6c318">84ce08a5f22082394108c3d0e70cdd284ec4c055527bb0630b31e033b1e849d2e8639630bd3e5a769b52fc266e4c7823c5a6ed94274a74c0d3ef1ef2b99bac8da938b9ea4b5cd52e7057dde270f0294a3d11af8f27a905ff59f6eb41a6f02d6470d2e8aa2aeaeb24d3734653ca2add38298ac72159b14038d52e252169391df5d4606acd3bd19db056637f49a7f7740a9aab29730c3e42cc5afc6cfa87790d6a0ab1e910418aa3ab361ad0059c046bcd60286b44389f4e8193a95ad349c20ac0a68c8d0a037dc38f5541d7d0834c0f0de0c94aab3dc39bea5dde5119455db42ea63e73fdd0fc47ff409147679b54dcf5a41126f2310fb08db1509d6dbef3c5b42738286e22e33d030beb6d4a21b6fd1e6c793edf63d74bf809d10f0650ee3c2ccef15b8c3c7dfac393b84d48edde67e3b7e57084e2bb6533c9cb74a3703cbcedda3e536f1d084acfb1a4f3ccc791a398a5a86d52c05c330ab94ccf9f9fd8884958587f42f0ebe96b4598234e9de7c9e2f7acb81244487d1f69c196b2febc59efb20c7a25740339fbf65c48dffd7cc288a54d7e82ec08193211464ec29d0f059006f2d7909801841da9ffaf497c6c1e95cf2578c4bd4e29f359874188117a4cda7ca3e55f0dd612c29a30ef6f64b11ccf15755daa788ef18701279ebe0878b8a79eb5f1c6eda7912f680e6d8751aaad19144cacda847ad1a953610b168fe0abc3b1d816e145abd181d659bebacd1e90a8dc031408318a393e15ed9f0c49b7f29e96e3777d0571a5ceddd0b81df45dc96647f60416dd1be55aeb2eb9d17db783ba74931c2d740f26bec3f9f20cb69d18203b689f0b626843bf2734964d569f7a2f373f4362735b3dbba04801d5e9e8d5ffcc9d4b209dd5a643e3ce8177ec363342fd20ad45381df76cb053100c9d70a01078b9e98b398d303a30c88f5a95319cd81807a619758e00f9af94484a94de6234c58029d5a34ad59d3b0eda64483b38c59df2ca344f78025cceb11be7a39692da11bfc20eac0a79404bf0670c4b4b00eceaa903e214d64fb2d0ee1b6b8a4ab064bbc5c59284c9d2b62f792fec83b2ac42e1309c29d155ece0e487209caf9dd83f127bfb14f6e7bfb21efbabe439c9b905ec84dcd374f31ee605d8a54674130d0dcc7f1839790d0e6e7496221772f8fe6675f8cb5124c6fde5e8e4a5a172ac7b4e6e31e45fc6426672aab3c9c4bd0f95e5c6354ccf70a4d05f4d893fe513ea15d0f3de13b2fc26494f7c79d3587073f2b55c63824eb8d2ec9f0c317429f7ccdec1f42d7f005ebc5a559f7d688c4def2d0aafb4beb0480fc02deb263d421fe00c86d504f81458354ead532c8f6b578bff4ebec5d597ca03501fdc94ce12dc3233000f0a7f491fe8295079213e007435158891987df8f7d49b0f45b532d6a2eb5ae460cafadb84a2200c59bbe63f0a019ffae4f51a00f3cf9909d6430c2a385797e137d0f6f2a2402337edba2a3e4089ffa10da1ca825aa7b160d9f38e1a1be8ead5c44674c562497e40a5d48d35e23c51b46b68c5ff2153254d04ac5d2d8d4f9d42fdfe537fefc374d60be9a44a373bec8df1de46ea4b86a3c9ffd3967d396dc7af9552c9b4fb7f9a6d63a7cb1fb9c1924c0ebb0b6419566c7cfbd212a6c1154d4129978ff065c2253c3c79916b35486fa8b5146eec22b8a800792b8c1f1303504caf09c23289d3eedac98832e7cffd95420c589a5f61929347c2257bdf6a86f197e0a62192f0562e3ede5a871e97dab0d87339e6104df8b7e964943f69f14a427afed7c6b650a3f358eee6d9794bd9a9373b7d5ac53d17b399416de432f72dc7f762178eaa397b54f2763336ed98ebfd179e45696a8fad7992097012982dff028f5d562b8d43433de5dd22f42bf7370b5b656422ebb324c479239599654fa24010ce5011d9207a25a11fbfcc2416b07875886bd9fad0e23d4e185f5c03e1f661378bbf5ce450eef0d905030efd0c4b703636f3b3e8d0e3e7ef34642f40872b18fb8bdf0c912c0ed29c1e2513d95b9806e3b9618872cb488e120264934de0fdd7d8c333bf50d517ffe0b5370d0f24de201a846dee47aef12038babea1ceb440ef7d11545b0641b2e852b103840689ee7703d4b9d1659821c63467b412345916e8cb78399e4cef48da8065dbfe2044b546059366e710a74533886b9f4b14b1654f0c60ce2d6fcc22bb0661a1970ef34edaebd677fd66b032fddd0e5c06c8b8cae43feb3736f81486c3b81e7740d0acfb9990a4bb2e06cf365b31b1f63a5db2637aeeae02dd539bc3e85e23ebbb9d4a177f4e3ca26f478a83688b359ce6f15d9dd1c28c9c1bad975ef9c202968623b6feabdf737f4728b5e4eb2efcee24b7ebd7d160a865e5716ba75cdba8d785f95d4f38ae2095838501cb82060a387183f6b1e3f714d7b9fb0073638e0924d3c99dacee227f8707dd1209749e7b6c10db58d60cbee5ec193cdeb2b5cbb089549067e8da85be74fe61c06aaa1feba7ada491b003c3b34e611d5d5895151b7636892b76622d23e1ecfcb65893c0780e120f9d3d63abff2555f4858bb2209550926b70c0b75670f3f15f9b97bdd4cc7ab582a7925b655813c7ffd2ed2c673071c89d977b89d5c515b42bcf12f8190c4b19e94776f4cb840c7105fa448a1cef6a2d43983b34ff3dd390fb5de50eb656bd125c25dd544b05133dfba9b012dfe671e0efc45218f64389569f5fa8e83077a64e62ac8a911d19c25646e12ed3900afa24b64ec05f7670321111aa86f790d4d62fa917122ede93e483338d229f1211f9d1b8f56336c9619322e3929b34608c97eb4e4e014d196b6943ab394796f009044feac9ae6d96966a294e4433d7f6a162e0e79fd71d83cae6c04c50b0d38f62a4e909d059e359af689eb9200eed30964db2f2b4d5d89f080917c2f0ec0da299678245961f787c7efa075cb2a19ea7af8e305ed191048433bfea60fe6624b01014c701129aa3d04d48d7baf6d57e36226b1dd56a1966a64f0aa1db0a181acd0a190f53f6a2efb45b21bc905bfecde428cb81f04d54b342e82d5612f0771e08d105521324374be4ae0fb643f6e14da383af2c93bc9b90dea9d1484ddccb64cc953d3e071df21bf63bdfa79b2c757f088f2e16fd93f7b3195483afcf629feaa30933e95aac2cbbc0fcac36939603d1fd67acf118604d5f36915622207a63824d27a865177d59e3d58c9add0f88a1931e2d71ea095e9ae760a4a8aa52041823e26241e363bed5a2f7ee9929c2c507cb20d141029e0ef5e091b4d0b3ca3738200688b333ef23aa227b8b1af2041df56303146cfb855195f802fdcc6888747cfa8eee732be9b2690ae8b5cbcde94c19f351364fe40ed0b7deaea5d0cd755f7b47022f6dd104fd74276b3b1d6a1b3e5022b42bc4948e0c5c95449e76847c6d8767a2223b1c9f46f101195377401f28f8c8dbc919433f55c9158e1872762c06985a8fab691809aa7fff0aff59b2df4d0def8f0323987daa9f2bc0b4a4ac8f340cbb47bda9ccd8b37169aed9fbdd22534c9a6bb32b02e6118d30948056b5800b138443487553641b48213ee41f472198f23707f0b85fff9729f8bb333c369177fc63a6799deb59d5f954df2eb398b44b7013b1110e7585fd3d43fba16a05848a50851ef30bf7b8aca6342c5ca7b86a79d2fcf5404869061ddffd55632c3fc8a336607aba14d096d755924956e53fa5c789045be6ccabd87597a6ea1322694497496371230e968792c63f9da3f644f7cce13324cb3eb12e159d36d536bcdb48ca9385bf227043ac925dc265bdafd63344a3b4b0a2648a65ab84991fd732b4bce81eaea7aef69be839defffb1fa2db31ec50ca70d3acdbef9135fb4930f2733cb4dc24cf0eb88dba8a420e106194beb679872493e93a30c52c1e11cf110a636b61338ea7415b21718607a96b3f9d92de336fd8ca54be1edba9f27a5c8bbb925d778adcb2285e9c3ea91d70ea356c3fe6500ac97738c59eb6ded217c3df93f61202cfcf980bfaa5de06f7ce80e9528c907acae961e62bdfc295a1be8a2474d16b09bcc9052b1fe2cc348b1024e9c349ba5df0f3422304e2d8c7c4040505aa07280f6f00e34db754ed37f7e2c383e2cb00b821174dd43f97209cb9dee2b8dcf12b234a527bc37b877827fca6ce91cfaf4c81bfa5f6e018248a0e65633766265822236cf48898682689d06557c7ceff8739d5626863c795b9ba92180d1923d634da99e9c7481f9632fddd65ac6d85b73de526425f0f64744ff65f0f3fab22feb2e08bf1ae93daffd61e54f2b6c0b33347c89de2a31cda0cf41c2b9df7c91688ac3ecc54373454694f649205bfc82e57ac59601dc7592bb3f29e5aee418c71caa6f0284a250530b7044f86307d6971b5cad6c5cbdb36ff0ad07d0b1094a9d156190576bad87b6df1306a1a7c14906c5b1e098f192e884a858f9ce40faf7ef1bb9e79882993b0339e05b52e6b2daf2e44f089b88486da839ec20fa82a4cc42f0973a12822eb5ad2feb320fd6cbee726e49f6b58e9e8508cd7ed95147a47138cf3a0319e2eb0b1609d4771f96fa133ce79ec0ef07fd28fa428891b0162b3ab3b0c09cafd6bacf7616c479676b0a831243579f99b037f92fa671f077c412fef9c713300888cd07770b130229d3ae538cfda9fa7c497a79632d1f497c8a6bfbdc5942fb24cdc3179b2efa3f3e62e06aa9fbf90f3b110cd9374fa9dcd1cb76585e0a6eeedac0c66c3d5b19baaca02f768cad8286d707e505851672d2379fce9d0b68551870b04853681ecfef108ff96b34d51b8783c4dea589939e146dd2a49e325dd70412617f5a8527c305004711bf34a9a9278492540573a208b1cefdd3ee88efe78ba917f03b39aa3188e8b83c048a381b04063b7eedf20c03da6988c22c9ba8d8f6707d18fe9d2e496278a1e25880f8aacef8defb7bb56607bc007611877cfbbf3fd6deca2bbe38e3a7f9dada41c748f4ba7553ca7b693b3706617553e89c6128929548c0278dff470ce3a6dd57873c33e3ad1b9ea1ba38bbda1b41ca48e0ac7b6f791c3d55b1e0c5fdf3f3084d997644cb1e9b96222419c43202b34d899c202ee039d7df09c76179ee5a0d8c7ffb847861009279d49508cddaaecc4be4843843c3a6e4e9d491957d397e456083f4d6ff8f2e0234e2c999775c0fbef1e128009b58d500733285949498eba2080512508535e5f88d7534570860b36ffae01f483359220f0eea6c90596ccb3e8a1181b81b655cc989b853501cb01140d347de54453b670dcfad1ef8bf163b3f62916c3189513dc29f4722d1ec149a4cde5a31882573c0d2b30409d7dbe5435c5a36e9718a639349c0b3eb0a33eb9daa4d4635eb91e5fdc18c7a0efb2b1d64dd7b0976436d7a98ea7580e12d342b89da186b4c41e207e3f77f3582f6ce7d907bec510cd902151775ac48bb6bdb84ed854a0e233c4c8c96fc798ea1a478b685d7cabe8ecd2de69a5a2a5d8fe9a7de41ee5b013a7a6b0e32aeb1c7ae9ed49ac55425b8d4f2d5540ad95135976f4ef1d37756d5075213fb5aa929b5263e8b95f63f424b3b6b5d46da6e4117c5a8ebed04aa9c3a7eb108aba73c0a300cdea2dcb6ef0a29c3bad718582b07140038ca44549241b8b9080852505be9643117c0de463ed5b5233d47e19fa17e45a498b19df718dc80d5600ed592fa60627cf95ede6f08471e15e7a0fb6177855cb0db81d31cd054f95f108d8a3cdd3de8d76de6d7ab30aea3d635b5f88ae6de9bbf7e48431da40cce936b4d5321a44eb0513251821f02da35aee00534ff27b825df33fda34a2896e0c5cdb2cc521d6d8b569aa78f229bbd81aa7d3224ebb5377812c36dbd8d85560f8c0905746dae93e8d6e37c84e651397641028403969fa26ccc03efbaa7a5e86225b00b9a0fce11a73e1f6571b50bfe12339b3d60e9817ed11390b0ba8fdc1fec7c77c4f0c206584a5010a9b0ff11abe8bfb916125119ae6f0a31e7dc5278a671ffc3dccacf59aca143df62cd6b0f6162b12cead1498b8ad68918e12ba5274948c2e88ed37221a1cec8a03542ecd807d77bb4d08d00055c82f175b367644b6a9b908241b8c61e72df4d62783fd1575d7ac0c6896e958efe1f92871c0ce8233c4a0127361a6ad8ef3a24195f5dd120273e3e93b04d0ed64b8735959dc365fd839a991d91566bb3a38e45bb9c3d6aa5446e06d1ac9eef4b03de6c11f8afdae2e00b5e4a95191c3f5a312e7239eac0b84c0932a24fc1d713f94ec814760551283fecb16e61874d15bcb5455e47dfed6839414c58fb77a53d628976daa35a6ede045596051b1df6fa37a1c5e707e0e232f2c397042b21becb6edf3e3fbb86fa3194ebaf3c7ed368ac20e249822e57e32a4fa49a6dd3c6a164d5867b9a6d949664643ae5435ef2c6bb696d14dd53c4bdb6e1524b61a468fc8a6d9f0fea3ffb6c0022702dd953239d71d41c22b0bd68814fb162f83c596820284ca2341d571055b2cb3a26e1539fd194687ca6cbb2dea09b46bf8e97f903e8ffa00a686d646c844a52b3676ac842966a3653012b7ede03400f36277182ebda959b2ecb7cf9405de8fe4acc270b92a00d449e7d735872514a5a8a8cf5bae2d4ffc7c04208374fa02e996372c65c5d3af6abc3dd2ca347ab6a4563c0ec534f69b72d913f78344deee070b2cde80f22fda9f0a3a3be67b296433bad660a8939ffefb3eecbaff45adce61a5625fcc40ffeee2dcfa077138d0cfcee11076357b92454b26aaee859f48a06374cfe8b856528a1dc4e3b6dfa7a1cd4b594acc55e8adb7ec9737b97aa5563881cfb73bede7969b479bbac098e40159de818c4323401b72b820f3d92fea46af7181c95d35291d4065901ef0f76ddf141ef12108975602cc58f736e3d11d748c3cbf59b86d4c52d0bdf9fc9f3c36114aadb6c066969a9509ae9541c84d092fd38d7486d6db913527e033fa18e064407707934068c14c1808d2e4b901538fa5548369a335af26ad2c670b5b879379316bb93525cabd7bd8158cfb4c45eb58591a2b3c6f2e93b03c52cb123d01fd8a4b7b3420c8021df708b7e7094d9d34cd73dcab3bd012ad579db57b56f73fb97477099e2b4d10ab504edae95e9fcb54ab3a76c5e867b070aad737bee27054b688158fce0fc7c303de7404c1c5f68918e7f5b134afe35424f8293c09b81ec5dc85d75cce327326ac01188bdcbf68189121a26d2f9f489063b42c38c19b8e60b3b117a45ed5673ad59846d2198f4ebcfb4a7853e1fcfd4c8ba6d23c1c8f963dc4d382f097ef3d351917b7e05f502b9f3480ab6dbf299696e5b1af744089dc072fde07925784c33d35d4821fcf39b1675d5aee596e3aaf27ffd1db17a5d32990016049524cd6d1f3628d58478ce328c5366e4dd1544c92d3b4f9bcdfb06d2efc8525a839c34b1b0e0e01d48d9ad9c7e26ef846081fac8a8cc7c168a22e4f9d1319aff39fb256f1daa29143d76e63183dcc38ad7cc935ab7d359ec395c9475954e2edad37ad0a3780c546795235c71c328a5cdec01de1f4755bd6e48f12a4009f50329844f8cf11cb1880ef2360c93f0fc391037a83f7779b9de07d69412dc84c3634688a5c7904f4ea67b71b8a4a9c8371446ce3524048011b6f46ce9f114e62666f53fb9f189d21835f247ebad8f6727da9cce7f9d516588514636ff23b62c1d0f2baa1f3162b37494661653892642b26009f80cc63c3966186c94417f432c5430108639c0c303353daab2508ac9f9bbb37df5cccbd253307ac57ca08033707454d95a21580c92f676b8036d949c6b706f6fc7fa27d31ebea7f35f3f293877ec468a1df3b2b4f013b9eb8497f4b9703320af08b654ea73bcc9feba676513d13837da8cbe6bc4b66e5ed3a159c48a55c62a8ad2aeb956f08e1d625a19e9f304fd96b604aae406fe89b553f467ad26ba09bfb36e718e855ea979feefbf04d0434dadda28d62b64a18753eb7f5cfa1897723ff8f6e5a7ee3e2a803867d9ecfd0123c8d9aa483c8316704ee825531a264e979f4f72e41b5bfea4bf721cb81194f3924d74f31cd4da1567c8b3c73d9b67ca5d0259a5cf483f1f523593d21ea6a7128a7cc13ace3dc755f835026a830f6cc2b10ee8d846a9d2e224d32c8adada6d059e51acb3f4e76d67c28216b39dfff4d893daf066206ce4927e477f0e629ad1f1afe9af118dc5adb630155391c6f58dc4ee0ab47cf36dea3eca2ed61cee266e8099e7bf88a9611dec705e28aecedf5c2c3f816578cf25f555f418dfccc64a01203de38c7c8889b05e94ec2ea78d9950b16a4c847a40cd6c4fb8b9b4407b65c3b40b22c5b6f83baf9d18514a13838ff4867f5bde6a55f40356cc531237c43bce1b1baf2b855d87c5b716170964f471ea863b74ac6b39fc3cf33e60190c369b26d64b1e6e9403d767d0a2691cb4ca71d1383ce860db04c797d341071d4c52d04efbe8b01c50bdcab33c45a31b2a4a797227e5e0e7b3d60ced0610cec83009278eeaf60a56f24e25cc805ff95cba0947d3bc742650706bfff7e721d16f8483bec3a30b23310a23803d1dae040db89dd114c37fa5a35180e7f1991471452c59c04405ce8b965e5d2d975f66af25050d0be419b22e15f33d38a72430cb9320a26c6f109e7abc8deadc5fbd18588ecd67eb40eda844a0cdcdd4c5794af0b828a10327ac5a9cd6bd70936bf07c2e28456548949091182c3b6f17782bcbacac4c576e1aed992d25953e0371c91f480295ece4aab6971659acdfeb9dcdfc176f218de689d05be473b983f9bb8ba0a9ec3854f07e4aa8578dc86e3f3f0bbeda2739f9346bbbd1cbc63dec5c12696bab6431e3d4cdb3e2887246746f7457cbd1d2d9eac037d8c6bfdc743c0ca0f1b867ae6328479adb96711daefe60954671c29f940989527878cb7e35ff1e72e66245392e419fbcb71d863518f24bbef484d8daf76dc5bb0b513725ce2f77d383283537132d8515d7967b5a77cd8497652fe5fdbbce9054c996478f564fc0521afd5ee00fa04c9ecfd491daf5bd94ea3d754f83ac895af298ad9faf0a3195a514babcede9fa538f7eb9d794372b1a5c39a3331400f12919d18691b04259758af6a8b806dc6484b4eb22548d90879e016bca3135af5fd361bcd4a4e41bf97dc95b2faed4b9cc1aec61247d26d0b081a7e01bf4946bbb1c1d92b7cfdafef0b92faafe6bb11177d1c2649bf18b04812696f4e9aea390255b5e2407695f89782cc45b47a0ef24917cdec786522def3b125cc63add13b1ec47a4612c3b1ecd244d09a04033cb6feb1dbcd60d4a43f40523f17471515574fd3ae08c5f7aecefe5b55b07153dd958738c325f87f582e10b9e80ff407dea9a7e2b974de92196e874c7b9fb78af5888380b3daa8820f87460769516a41a93ce428c090dbf409a376be898603ed7bcdc917dbbb6eb07a94561f2a09e0b1cb772ef37a110400975402a6e8d6c92efa4e6a4108762a73180c28d1f0d85e732cbfdc0e7d2065575d9e15eb24ef339c299facadc1d11806975914174bab0c437efd09ef1cc5f64fa9e72e0458be7e37d09d6f526accae61b9e4ce9d4b7e081a01f83d069bf8520ec85624c2a21ed5b0232288df8149c489708106f96e9ca94f20bf6c9405d087fad9c48869f4828416e206c3bb86f8d861149dcfe310651ba9ecff18672d15224850f9235b6700d82a628ace0b3c4ea858829274a617c5ee8a96353e8fd30493747c3cd28407d78ac90687ca17fc5ceb837a8601fc6d01c3bfebb7d512b3734c7d13daf705983075f1c214ae972b901c66323d12760574f552bea8a646b9ef217183998f2da6067870abd3b407af7053ac4eaad86159ded29b5aac6fdc04f2d05693e1da7a5d29e410e5be8da24b2dea58ac7102c56e4ac0a7a8c2dedab04fcb9bf3cb01dc1057baa0343a00fd4dbfc46d5fa817a8c3ce182e3662ce5b18ecde3294c9e5466decaed861ef1f34f150d5846d8909f5bdb2f899d05f31265c9f8d8b080f1f5c3b1cf635e2633d7d63bcf3d9c01d8587f8e6959124b7d7bf39377f0c1a52bd4e15904481994ada0c2a31db13751ef59356f3e13388b07af9188355a1555de1c5d65a269c17e43f44df7bfeae0d36425ab8e73662bc2386af33073c38db4fc9e99ba6758db4fe8460907f7233c093256e54c14203b51881da2cdcb23c931726f6fa7744067df4f5edc7512a3d1d4e183c3c86ac9168c7b17c0547f3df5d4340c6739353b28b0cb221c00e1fba384b77449a4f9c313da11aa588c3b64762cf5f8a0cf78b7b8ea6685203095bd6cfd75ceb95393adc8f326ebc4ec2d54c73ffac0745314fba49acff2b8f89b07775f6b68f54b8cb40fcf1f5e1a22a95398dc36deec17bc1446049d8c272cd3e12d6cc77383954401ba7cef1ef4b61609a3aaaa6e488d6a8f805982678c8fe27e5a165003de37c90ab0374e963163a2378ea784eb8833c90fd183e959a1dd1c49f028920c3d3638ce693a77c81e95e3e64a004824adccf2270b1dc0af1ae26e7ecce69e4376248580ba1cd8689e8380d694daf6a3cee8376f7af80f36c09def25c25809fa359a6ae587d95cc89a1929e31d0fb681fa0db07146c6d1e60e0c60155a7171306e072d9d369b5c605a692f84ce30afc410c5821f36b8fe92216fba5ec772086da8e3131a9ae516c563a79d9a1860ae1b108ff610725ddd36513eeb8cb874fafd56dd4ed84770910c56c2a8c513d44163eea3488d97d0fa5eba7095b8b4e64e71e425fa0a33e04468533fe2b1ab6197f59c455142806af7443ca54322aac61d89b8a77a9929ec33acf90f5510cd4f71d456915a2fcc6a597742a3e349f1148e79257aa5f78c86d458414c1f391cc217305ac13603481254a42faa59a9db6c15f307031cc67f43d972a4c83414b929a39bde2f81a872e83222359d49cf6907112a467c8c242e5fcdb42b0fd36273a29ea8b0b457b7d0358d4854207c2a12e1a1c32329b38dcc0fd460c96247f1921690a0d05c57d3ab11fab4c88f9ad36da6f837f54a4d4caf8eddea08ba8aa41239476521def4219025d7b094203cf2dd647c7f39ac5f9362feb899769293458ca447e90826b36a273d33a6adefd08dd05d0765a5912dfb244569f18d0dc4f5276813b45baa29fec0696606ebf00edf3c4bb15fd1e426efbdd9b2ce083898287544d393645c6f2266b19eeb298889a0dade345db73d30ad5eafa61319da57f8d531ea738c12eec0e995739a509cc19f8d3e7c0b6603e565a870b0f1fdd151c00daf4f55e54be7bc83e5eefe519e96aeb4b37de05731141e7908bc1dad96c238d74943980d8663d6984ddd1d81a5037f148ff31faa051d1cd5c80707c7cdc8c83acc0b9211d4724b91c94ddbc62dd50258a0162eb17904e937f5b35be67b70fb5546a12eda50502ab64c5f5bb5abcf0d0587be20e6ece3105c38c1fa80f338bf36d2288e21e65adcfe2f0952cc294f1551ef497845a8b7860bb177c389205d65cd3448667abaa44a90d4bcd72e28108631ce7065bb972946387ee672dbf7ae642a1a9c1dfff6e8522561bf2244eb3ef2114327003eecba37b6a70d2ef8a0d49c6518ebce8fe8b812f3c7236c1191d7aa03aeec453ae1754cc464d830728a5fdfea1d8be461f7326c60a2ed99ccb70160df57cb7fbd0c2a36ded0fe0b6549b30a2c863db175e20b858cdaf67a0bc1cd35790a1f970333d4aa4fb7dad0a9ec0c385bd4b14cb3471da066a6b0d4b8cb478412257bdb7983e32731a4473d9ad8d6835a221cf40aadc6a59ae0e4ad8b14c09dfa1477a5744d5fc8a9454d871336bd4ce0fe88dddfc43b88db362f494bc67c2d330748b9f7f95c9ce390c64c03067ef5ce459572e0711e133ded7df2cda8ba1f2eb0582f1e7eedc169ee94b88047aa0b969486e15881577e13d8529edf21d9a60b7f82bab8b3c7f3e98ab0521975155236f2358857d7863d3a23fdbf183566294179165fdf105655cc5cd609b0c1e64f6ed907b79971082c87a4e3e0fbd4738d39fca606ab554ab097dcb4d4eb46801af9268fad10e868a31dd09e1c45e295c43a40de7c251d129a4f3d3a8fcf1f2510e95c7e6dea3dfc0b9c60b9a980b0ee13320a03c5cbe148388d411d18bb7b0418b7cad5154b4f5c9aadfb84e5edd900289424be40598b1d16c29807c51e2e5f5c301a67841e3cc555ae20faf1c906d593ec03a0747b7fcb4b21a0341c07bc9d2a8a2650fce2b198893303f45ca538ed7ccb88918f2c4624f1e5e6ea2caeafc2ba4cb0aa7a66a3b205ebd57f16e5280ee25e2fb0c5b258ebd1b99b01fca24edec4722cdc97b291f526326e1679533bdf2167e9726352970acd60586722eee7a9a915ed0f7f5bed2bdf39191fa302ba5f39e5d5d1c60d5a9c13dd95ba8e412241b746b628c76f2fa6201fc0f796ebda01063402f09dd0746bb4d3abe12a167bce3468126a3f9709d3991961784d23a38290188510712dd8ee76cd20b12b5b5661471e6f2cd29b4500aa440a0f4e5d224dd739cb952bd08ab4189221c5e847c8f2b40723d432eb1f6646f7441f1faa2292d30e3e84ae0751cab8c7fbeb8bf291b786496dfba4f37ff266d58be376d77d9243a17c92d3259f00b3d14b7120728f444543cf9bf8ba944af5ac537a18ec84eab21c01df823aea89fd82c39244cc0355a880d6122186ddaee6fec7c2e2888ea744b59536d17bff5bff871b68cee660d4f73a90296e76380971abb794cbd78025af39bed724984288de4ca2053295a7ae093f7c0153e9be316b9c48489020605fa4e3cd49fde2d314c02d4b7caf1b06d27288efdd24e4ee6649d5eaed4eaae5a2a6445f474af932281fa9d745e5123f8166c829f466ed58bb1460a9d16a23df5594b39c19f1f935b0218deea6e80bcd05a9ef4737a0bb26447f579c3c2f37153890aa7e20c3dc4a19610cddb7a321346fd1b9ff1596825cf9b9dc79571388d37d52146b84eb2eaf1fb74146550d372274c470be3b7e68374f224a73b8f18c0a496bcfefaa8e0e6b888892795cde08484b16393a64dcd4c9b75efa23d646fb01a0b16196603969c858f94149b844574aa7fe85a3f49a694bd09edcb629009648672de912700fb23d1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Loading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Loading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嘿！</title>
    <link href="/2022/01/20/alltodo/"/>
    <url>/2022/01/20/alltodo/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="434fa8f7be19c64191d3e3b73803a8c2c7c5c346bbe9d61f3030148ad6a689e4">84ce08a5f22082394108c3d0e70cdd28e3132ec568d57a2883a9aa6fae1d36a9a9ff97179283e82bb824bb1980bb62107920d4613af6953c7f1e3604a3256c912a83fe4bb86c47573d2043ceaf6262196f2f420a4c480faae6fd1462a89bc94309eacf843130065d25e6f3ff1eafb9e4a5bed05bee82a9fda4c9bd80f99004a4918755b098b789eb94742f433b6b2313f6eea4d80a09d4bd5979af07c4130e05263027fac85a4fcfbdb1e511b450197e03ed5b53327679f00daf3383c72ce43e78a729c8edc8e5ebe3ac1d2207bf3595fae03aee08d1bb83dd356a43a0ea012d03f661dac72cc379108cf2d10325f4ed094d25dac14b368265d50d641fa94d199e5d26ac5758cd132a7e4cb0589f236a8818b86ceee6166e3e9e25369cd789159d77f74aad530f6d9fa3e497765d59bdbebbebd7d466879851c6248407f8486c1bb8c030b600109b376bb66ca6c283ac349281a706894d075112f958e48c16d939b362d2caacb8c9f2b082bf6131d0ae05c40c8e2d79b93da73450e9256420a14552b68a13342e525abed58ab48a7cabdecfa2805503e279cf661a65bb83716065e2b05111a27dd9d18e28865c9bc12dfd0deeb9f410f3984bdf760bb441662cc2d892b25be1b1d5241e3cf62d3c6529b9c9a510bc0371928c7d32bd520ab64f17d9e52e77226eef00e0b345c0cf5d3442462041dbe7fd5b6a8237c0ef406a90bc94fa9f823fc10e4bebde8d645cf9aaa71d9e55043324e52cd398b8ee231d89e79bb8588d513abb4ffb1012adb4cb527ac961bbe695abdd63bba2a32f04c57eb0901797da8dd7173091ff145cf34e50883568091e941cf152bc2f2bd1b64f6b9868a14bb42d27e8272098111248a38ee229c2a04340fa7b18d696d870a2b424bb3bb65450fe23f5600c3a9e3db6c2bf5c217295c8eec7e8cf185a48b3cca3f84850835e5f847ec85e5f70f2cad208b16e14c3e8c6210f3b5a7ac38ef67ea5ce924efe6ddbf5bcc5aafbfa973081a5c43fc68615ba97394ad64000c0a02076e1fcdc6161c36e04db1aad53b494b68f5b7216f660a713000266c921173df7475006251211b6efb0d6cb09a5b2e994f19e3a236f5fefc3717e82b4486ce33b9f234d1aa0802c5c81c71a7979cf8985858720503def9351ed08938eb9613b5e255ff79921364832bf124eb309fcd4a0d6320b3a7cb5e9a5cf2b86449434577cab61eefcea774447299fc430a922e8a13ea2d3314647375b04cffc984ef62613113118f22de79fac391fa290d9aee43e0f812d28a460dd36ca97e9e39d5924d652069a6e15fc2dbe67f0f11a63a77a47d39d0751933931ade2cc5889bfe86fa44a7af72bf5a6d4fae873777b1ef584c8aeaeb37afc9c7792daeefa105081ddbe03d5756e5a95041be18852d1fc684cd61a57f12076b8706d9b57dd7b93419e2a3e3547bba52651536a79b58ef09518427089830b46a85fafbc77bd7de0f3abfa69dd0fd62b5e15fdd1f1261757ff82e88c5eb0a1e0455be06b066c8603a327a736355c33b45be71200fc89f4205f4f64234b5d8a158422622622abc31aea7edfe48d1ad63dceb78051980b55cfabb96df4a550d340a1ab52fe06bfb9505c029fa42e449c7eca0003b9bba5ed557eef96b91d44a24e2205e68f96e733565418fc69bf555ad204f02fc6e91d57a02d2d22de35b7d9ddd73f76a6c5bc72ec400159832db827ec91756a6827b44439233180e79a8ccae9e61092d1e806ed6b4230ef6ee562fb15af859cce1c399f98ec65c3b88f66ea934a5b5d59f348721541bbf5411d288c0d2f1e8df743fcd69ebf8153e25c8cdbb261aa0357b389249d9d363313561f6ab7771d5eacaec852f0b8401914ce86a22e4c6885d91f4f7d551f2522ca03b9cef105bb9304dbb4065845af4dfec374903978b3952744400b7910a23a77822658b8b1e120fb6188c853cae204521aa4b9b1224979476c04de5c0c25880596c9dabab6a89dc91850f5dc2b9ce5e142e71123957dce48c0c4fa6219dfca4ce1bebe4efe6922df4689fce14f10d89c0a53d614f956855ce9fa78c7044d1d08a01528d61f6a17fcf11f7934d5139b94e6cb9e6dd66d7e8e06bbf8ec290439c49d9b332b64a3d929ed4cc20d44ad9051cd0616d6ebc17d3d70ec9cabd715f49ddb7b75235a27f7f253ba1f39a163b888e8fe8ffda9ec29ae80947c3f7220d6751f8707758b7668168a0aaa46e47196f1e9e9fe5356dbf5ade5de5dc2f4f39e2cf7fafcc43b9adf1816116aa846d88aac68eede650728f4218b05eb00c55d9932289f9684e9a347e05ce9cc65d3faf517b8d349a9ca883794d57f1a7452d7b712fa9ff77e97e11a9ea688b71c5ad8ded31e9a202012056625d04f7062aab0575d0709ca95b705dd16bb0c8cd25224dff53141627d8d256dca6b8504cca76e388ace6129b61fafa2e78e235e10bd8bffcba4e0dacf9969749f8df08b2e251b73f314fab2be541bf1ea0f1ff2d13be678ac7880842fd6f274f97b1393bf76ebf85e27b562e7c64fcfb2dc40a77574e03727d682c685cb959caf7c63faf9c20d9e8123df729378725227364dd67863ebef017bcd9a26d45f06e95f5e2950f5e2c787dcb5476382308e5c4f254bbaf0c8b4c110761fdd1acd1a862bbc3afd53f3ab525982efd219b70a9c737efadbe615014b6047c3f7449e44f74e37ffb81497f86960417e980354cf47cdecc179146d0678b7676898663a0cec5a439c47eade3c90ae9f943bdcadf8a5aa855add887e9531c7b82183ea54a9ddd280e9f9d14e0085dcb78083ca25981f5f4a9b45d5f3dc08cfd4d2d0d7b649a8138be63cc7eb4c77f620b11af031f2b12fc76039ea1d226fc564cef61c0f589feb72d24ddb44bcede1a1c14727064ae9f92ce69fe0e38e5d1c25c5fdbaa44eade7b61624e59e2e7d96fa316b10555901ceff6c59bbac9b7f741f60480ddc15b23ec4b78c6569c1e9a6085b9b38fa186bbfe758c20457e4733b210f57da6826e343d969f61da0d403dba22153f64471f5f964615cb7f68775822d06528d7dbcb77ab77b0649c4d72a15dd5a700a230ddc5601c1958752fb08e294c6759998fb48f35c274a0390e1b44c44f332823022f609d1017851c2c64fcbe054f88e45ddb63bfbd7d317c2407a07ec77ffabbae73ec7b3e39454267e587fd513852a86f5e5d1c55e37b4bba0d38857a30c411e306f3ac3a08d68cad3a0681d01cc85fb5c7358421231da626179ae</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>这里都是秘密</category>
      
    </categories>
    
    
    <tags>
      
      <tag>秘密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《软件工程》课程总结</title>
    <link href="/2022/01/10/%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E3%80%8B%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2022/01/10/%E3%80%8A%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E3%80%8B%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>结课之后，感觉似乎学到了一些东西，又似乎没学到….</p> <span id="more"></span><h2 id="一、软件工程概述"><a href="#一、软件工程概述" class="headerlink" title="一、软件工程概述"></a>一、软件工程概述</h2><p>软件工程是计算机软件开发的过程、方法和工具的学科。我们的软件工程课程主要讲了如下内容</p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201081430207-软件工程概述.png" style="zoom:50%;" /><h3 id="1-软件生命周期"><a href="#1-软件生命周期" class="headerlink" title="1. 软件生命周期"></a>1. 软件生命周期</h3><p>软件生命周期是从软件目标的提出、定义、开发、维护，直到最终被丢弃的整个过程。</p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201081434036-软件生命周期.png" style="zoom:50%;" /><p>比较有趣的是，大部分人觉得软件中大部分错误是编码错误，但据统计，设计错误占软件错误的63%，**编码仅占37%**。</p><h3 id="2-软件开发模型"><a href="#2-软件开发模型" class="headerlink" title="2. 软件开发模型"></a>2. 软件开发模型</h3><p>软件开发模型是对软件过程的建模，需要确定任务及执行顺序，保证质量和适应需求变化。</p><p>常见的软件开发模型：</p><ul><li>瀑布模型</li><li>原型模型</li><li>增量模型</li><li>螺旋模型</li></ul><h2 id="二、软件开发的计划时期"><a href="#二、软件开发的计划时期" class="headerlink" title="二、软件开发的计划时期"></a>二、软件开发的计划时期</h2><p>通常，在计划时期，我们要完成问题定义以及可行性研究分析。</p><h3 id="1-问题定义"><a href="#1-问题定义" class="headerlink" title="1. 问题定义"></a>1. 问题定义</h3><h3 id="2-可行性研究"><a href="#2-可行性研究" class="headerlink" title="2. 可行性研究"></a>2. 可行性研究</h3><p>在最短时间内，花费最小代价，确定定义的项目是不是<strong>可能实现</strong>和<strong>值得开发</strong>的。</p><ul><li>经济可行性</li><li>技术可行性</li><li>运行可行性</li><li>法律可行性</li></ul><h2 id="三、需求分析"><a href="#三、需求分析" class="headerlink" title="三、需求分析"></a>三、需求分析</h2><p>在需求分析阶段，我们要建立目标系统的逻辑模型，并形成《软件需求规格说明》。</p><blockquote><p>目标系统的逻辑模型即反复与用户交流，调查“系统必须要做什么”，建立原型系统。</p><p>数据流图、数据字典、加工处理</p></blockquote><h3 id="1-数据流图-Data-Flow-Diagram"><a href="#1-数据流图-Data-Flow-Diagram" class="headerlink" title="1. 数据流图(Data Flow Diagram)"></a>1. 数据流图(Data Flow Diagram)</h3><p>顶层DFD是系统的基本逻辑模型，包含<strong>一个</strong>加工处理和若干输入输出流</p><blockquote><p>顶层DFD图中不应该出现外部存储</p></blockquote><p>分层细化DFD的原则：</p><ul><li>父子图平衡：将一个加工处理分解为一系列子加工时，分解前后的输入输出数据流必须相同。</li><li>区分全局文件与外部项</li></ul><p>DFD图绘制规则：</p><ul><li>顶层数据流图<u><strong>不要</strong></u>出现数据存储</li><li>数据存储之间、外部实体之间、数据存储与外部实体之间<u><strong>不能</strong></u>出现数据流</li><li>数据流是<u><strong>单向</strong></u>的，不能出现双向箭头。</li><li>任何加工都必须有输入和输出数据流</li></ul><h3 id="2-数据字典"><a href="#2-数据字典" class="headerlink" title="2. 数据字典"></a>2. 数据字典</h3><p>包括数据元素（数据项）、数据流、数据存储。</p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>对DFD图中数据流的描述。</p><blockquote><p>数据流名：</p><p>别名：</p><p>组成：</p><p>备注：</p></blockquote><h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><p>对DFD图中的数据存储的描述</p><blockquote><p>文件名：</p><p>组成：</p><p>组织：</p><blockquote><p>按某一字段，某种顺序排列</p></blockquote><p>备注：</p></blockquote><h4 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h4><p>数据元素是对数据流、数据存储中的字典条目（组成）的解释</p><blockquote><p>数据项名：</p><p>别名：</p><p>取值：</p><p>备注：</p></blockquote><h3 id="3-加工逻辑"><a href="#3-加工逻辑" class="headerlink" title="3. 加工逻辑"></a>3. 加工逻辑</h3><p>加工逻辑用来描述DFD中每个加工能够“做什么”。</p><p>通常使用<u>结构化语言</u>、<u>判定表</u>、<u>判定树</u>、<u>IPO图</u>来描述加工逻辑。</p><h3 id="4-结构化分析方法-Structured-Analysis"><a href="#4-结构化分析方法-Structured-Analysis" class="headerlink" title="4. 结构化分析方法(Structured Analysis)"></a>4. 结构化分析方法(Structured Analysis)</h3><p>在20世纪70年代中期，提出来了一种成为结构化设计(<em>structured design</em>)的软件设计技术。而在70年代后期，又有人提出了与SD配套的结构化分析(SA)技术，合称为<u><strong>结构化分析与设计方法</strong></u>。</p><p>SA的指导思想是自顶向下、逐步分解（对应于我们DFD图的绘制步骤），SA方法的步骤有：</p><ul><li>分层细化DFD图</li><li>定义数据字典</li><li>定义加工逻辑</li></ul><h2 id="四、概要设计"><a href="#四、概要设计" class="headerlink" title="四、概要设计"></a>四、概要设计</h2><p>在需求分析阶段得出了DFD图、数据字典之后，从需求分析阶段的结果除法，概要设计进行<u><strong>软件结构设计</strong></u>与**<u>数据设计</u>**，编写《概要设计说明书》。</p><ul><li>软件结构设计：是概要设计的主要工作，分析系统由哪些模块组成，优化模块间的关系。</li><li>数据设计：将需求分析阶段创建的数据字典，转换为实现系统所需的数据结构（ER图等）。</li></ul><h3 id="1-软件结构设计"><a href="#1-软件结构设计" class="headerlink" title="1. 软件结构设计"></a>1. 软件结构设计</h3><p>通过软件结构设计，建立软件良好的模块结构，确定模块、模块间的关系</p><h4 id="内聚与耦合"><a href="#内聚与耦合" class="headerlink" title="内聚与耦合"></a>内聚与耦合</h4><p>对于软件结构，有这么一句话：宁要塔型，不要饼型，提倡翁型</p><ul><li><p>内聚：模块内部各成分之间的关联越高，即内聚越强</p><blockquote><p>功能内聚、顺序内聚、通信内聚、过程内聚、时间内聚、逻辑内聚、偶然内聚。</p><p>内聚程度依次降低</p></blockquote></li><li><p>耦合：模块之间的联系越小，即耦合越松散</p><blockquote><p>非直接耦合、数据耦合、特征耦合、控制耦合、外部耦合、公共耦合、内容耦合（最高的耦合）</p><p>耦合程度依次升高。</p></blockquote></li></ul><h4 id="图形工具"><a href="#图形工具" class="headerlink" title="图形工具"></a>图形工具</h4><p>层次图（H图）与结构图（SC图）</p><h4 id="结构化设计方法（SD）"><a href="#结构化设计方法（SD）" class="headerlink" title="结构化设计方法（SD）"></a>结构化设计方法（SD）</h4><p>将系统的逻辑模型DFD图转换为软件结构图（H图、SC图）</p><h3 id="2-数据设计（PPT没有？？）"><a href="#2-数据设计（PPT没有？？）" class="headerlink" title="2. 数据设计（PPT没有？？）"></a>2. 数据设计（PPT没有？？）</h3><h2 id="五、详细设计"><a href="#五、详细设计" class="headerlink" title="五、详细设计"></a>五、详细设计</h2><p>在详细设计阶段，我们要确定每个模块的算法与数据结构，为每个模块设计一组测试用例，编写《详细设计说明书》</p><h3 id="1-详细设计工具"><a href="#1-详细设计工具" class="headerlink" title="1. 详细设计工具"></a>1. 详细设计工具</h3><p>为了确定每个模块的算法，我们使用了描述算法的工具——<u>程序流程图</u>、<u>N-S盒图</u>以及<u>PAD图</u>。</p><h3 id="2-人机界面设计"><a href="#2-人机界面设计" class="headerlink" title="2. 人机界面设计"></a>2. 人机界面设计</h3><p>人机界面应该具有一些特性：</p><ul><li>可使用性</li><li>灵活性</li><li>可靠性</li></ul><p>界面设计要遵守的一些原则：</p><ul><li>用户界面适合于软件的功能</li><li>容易理解</li><li>风格一致</li><li>及时反馈信息</li><li>出错处理</li><li>适应各种用户</li><li>国际化</li><li>个性化</li><li>合理的布局</li><li>和谐的色彩</li></ul><h2 id="六、编码"><a href="#六、编码" class="headerlink" title="六、编码"></a>六、编码</h2><p>程序设计语言的特性、程序的设计风格会深刻的影响软件的质量和可维护性。我们编码的目标是要产生正确可靠、简明清晰、具有较高效率的源程序。</p><h2 id="七、测试"><a href="#七、测试" class="headerlink" title="七、测试"></a>七、测试</h2><ul><li>软件测试是为了证明程序有错，而不是证明程序无错误</li><li>一个好的测试用例是在于它能发现至今未发现的错误</li><li>一个成功的测试是发现了至今未发现的错误</li></ul><h3 id="1-测试步骤"><a href="#1-测试步骤" class="headerlink" title="1. 测试步骤"></a>1. 测试步骤</h3><ul><li>单元测试：集中对源代码实现的每一个程序模块进行测试</li><li>集成测试：把测试过的模块组装起来，主要对模块间接口开展测试</li><li>确认测试：检查已实现的软件是否满足了需求规格说明书中的各种需求</li><li>系统测试：把经过确认后的软件纳入实际运行环境中，与其他系统成分组合在一起测试。</li></ul><h3 id="2-测试方法"><a href="#2-测试方法" class="headerlink" title="2. 测试方法"></a>2. 测试方法</h3><blockquote><p>Testing is the process of executing a program with the intent of finding errors.    </p></blockquote><p>具体可以分为两大类测试方法</p><ul><li>静态测试：主要进行代码复审，检查程序的静态结构，可以采用代码会审、走查、借助静态分析器进行自动化测试。</li><li>动态测试：在设定的测试用例上执行被测程序的过程。<ul><li>黑盒测试</li><li>白盒测试</li></ul></li></ul><h4 id="白盒测试用例的设计"><a href="#白盒测试用例的设计" class="headerlink" title="白盒测试用例的设计"></a>白盒测试用例的设计</h4><p>我们可以在程序流程图的基础上，使用逻辑覆盖法设计白盒测试用例。</p><p><em><strong><u>对于逻辑覆盖法：</u></strong></em></p><ul><li><p>语句覆盖：将程序的每个语句至少执行一次</p></li><li><p>判定覆盖：每个判定的每个分支路径至少执行一次</p></li><li><p>条件覆盖：每个条件的真假两种情况至少执行一次</p><blockquote><p>满足条件覆盖不一定满足判定覆盖</p></blockquote></li><li><p>判定/条件覆盖：每个条件的真假、每个判定的每个分支路径至少执行一次</p></li><li><p>条件组合覆盖：每个判定的所有条件的各种可能组合至少执行一次</p></li></ul><hr><p>我们也可以在程序同的基础上，使用路径测试法设计白盒测试用例。</p><p><strong><u><em>对于路径测试法：</em></u></strong></p><ul><li>点覆盖：每个节点至少执行一次</li><li>边覆盖：每条边至少执行一次</li><li>路径覆盖：每条路径至少执行一次</li></ul><h4 id="黑盒测试用例设计"><a href="#黑盒测试用例设计" class="headerlink" title="黑盒测试用例设计"></a>黑盒测试用例设计</h4><p>黑盒测试用例设计时，可以采取的方法有等价类划分、边界值分析、错误推测法。</p><h3 id="3-单元测试"><a href="#3-单元测试" class="headerlink" title="3. 单元测试"></a>3. 单元测试</h3><h3 id="4-集成测试"><a href="#4-集成测试" class="headerlink" title="4. 集成测试"></a>4. 集成测试</h3><h3 id="5-确认测试"><a href="#5-确认测试" class="headerlink" title="5. 确认测试"></a>5. 确认测试</h3><h3 id="6-系统测试"><a href="#6-系统测试" class="headerlink" title="6. 系统测试"></a>6. 系统测试</h3><blockquote><p>$\alpha$测试：是用户在模拟操作环境下进行的测试，软件开发人员与QA人员也应参加</p><p>$\beta$测试：是由软件的多个用户在实际操作环境下进行的测试。即是在开发者无法控制的环境下进行的软件现场应用。</p></blockquote><h3 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h3><p>除了上述测试外，测试还可以分为好多种类：</p><ul><li><p>功能测试</p></li><li><p>可靠性测试</p></li><li><p>强度（压力）测试：高并发访问等</p></li><li><p>性能测试：通常与强度测试结合</p><blockquote><p>应该差不多吧</p></blockquote></li><li><p>启动/停止测试</p></li><li><p>回复测试</p></li><li><p>配置测试</p></li><li><p>安全性测试</p></li><li><p>回归测试</p></li></ul><h4 id="8-各种测试工具"><a href="#8-各种测试工具" class="headerlink" title="8. 各种测试工具"></a>8. 各种测试工具</h4><blockquote><p>体验了一下NUnit系列的JUnit与CPPUnit，感觉很棒</p></blockquote><h2 id="八、软件维护"><a href="#八、软件维护" class="headerlink" title="八、软件维护"></a>八、软件维护</h2><h2 id="九、面向对象软件工程"><a href="#九、面向对象软件工程" class="headerlink" title="九、面向对象软件工程"></a>九、面向对象软件工程</h2><p>面向对象方法是以对象为核心的软件开发方法，按照人对客观世界认识的规律和解决问题的方法与过程开发软件，描述问题空间与实现在结构上一致。</p><p>**<u>UML</u>**是对象管理组织（OMG）采纳的基于面向对象技术的标准建模语言</p><blockquote><p>Unified Modeling Language——统一建模语言</p></blockquote><blockquote><p>面向对象 = 对象 + 类 + 继承 + 通信</p></blockquote><h3 id="1-UML模型基本组成"><a href="#1-UML模型基本组成" class="headerlink" title="1. UML模型基本组成"></a>1. UML模型基本组成</h3><p>① 要素：Use Case、Actor、Class、Interface</p><p>② 关系：</p><ul><li><p>关联关系：当一个类的对象作为另一个类的成员变量时，两个类之间有关联关系。</p><blockquote><p>聚合关系：整体与部分的关系，整体消失但对象不消失，部分的对象可以被多个整体共享</p><blockquote><p>球队与球员、电脑与CPU主存等</p></blockquote><p>组合关系：整体与部分之间具有很强的所有关系和一致的生命周期，部分不能独立于整体而存在。</p><blockquote><p>活人与跳动的心脏</p></blockquote></blockquote></li><li><p>依赖关系：一个模型元素的变化会影响到另一个的模型元素</p></li><li><p>泛化关系：被称为继承关系，为通信而存在的关系</p></li><li><p>实现关系：类对接口的实现</p></li></ul><p>③ 图：</p><ul><li>静态图：类图、对象图、用例图</li><li>动态图：顺序图、状态图、协作图、活动图</li></ul><h3 id="2-用例图"><a href="#2-用例图" class="headerlink" title="2. 用例图"></a>2. 用例图</h3><p>Use Case图用于描述拟建系统和外部环境的关系。</p><h4 id="Actor"><a href="#Actor" class="headerlink" title="Actor"></a>Actor</h4><p>**<u>主导Actor：</u>**初始化Use Case，主动要求得到结果，触发交互活动，<u><em>至少</em></u>有一个。</p><p>其他Actor：仅参与Use Case，在某个时刻与Use Case通信。</p><h4 id="Use-Case间的关系"><a href="#Use-Case间的关系" class="headerlink" title="Use Case间的关系"></a>Use Case间的关系</h4><ul><li><p>Include：包含关系</p><p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201090939411-UseCaseInclude.png"></p><blockquote><p>用户不论是对账户内容的增加还是删除，都需要先登录。表明删除Use Case与增加Use Case用例都include（包含）了登录Use Case</p></blockquote></li><li><p>Extend：用例的某一部分是可选的系统行为</p><p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201090942694-UseCaseExtend.png"></p><blockquote><p>用户打电话时，可以选择使用呼叫等待或是呼叫转移等增值服务，此时呼叫等待Use Case与呼叫转移Use Case extend了打电话Use Case的功能。</p></blockquote></li><li><p>Generalization</p></li></ul><h4 id="用例规约"><a href="#用例规约" class="headerlink" title="用例规约"></a>用例规约</h4><blockquote><p>用例图是骨架，用例规约是其内在的精髓</p></blockquote><h3 id="3-类图"><a href="#3-类图" class="headerlink" title="3. 类图"></a>3. 类图</h3><h3 id="4-序列图"><a href="#4-序列图" class="headerlink" title="4. 序列图"></a>4. 序列图</h3><ul><li>对象</li><li>对象生存线</li><li>控制焦点</li><li>消息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201091012664-sequence.png"></p>]]></content>
    
    
    <categories>
      
      <category>课程相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CUMT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《智能科学技术导论》课程总结</title>
    <link href="/2022/01/04/%E3%80%8A%E6%99%BA%E8%83%BD%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%AE%BA%E3%80%8B%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2022/01/04/%E3%80%8A%E6%99%BA%E8%83%BD%E7%A7%91%E5%AD%A6%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%AE%BA%E3%80%8B%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>本文是复习阶段的仓促产物。</p> <span id="more"></span><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>虽然这门神奇且考试有点离谱的课今后不再开了，但是总结的东西似乎大概也许会有一点点用吧。</p></blockquote><h1 id="一、算法、算法构造"><a href="#一、算法、算法构造" class="headerlink" title="一、算法、算法构造"></a>一、算法、算法构造</h1><h2 id="算法性质"><a href="#算法性质" class="headerlink" title="算法性质"></a>算法性质</h2><ul><li>有序性：算法中步骤有执行顺序</li><li>有限性：算法中步骤有限</li><li>明确性：算法包含的每一条指令都是明确可以直接执行的步骤</li><li>终止性：有限时间结束。对于特殊算法，如操作系统却需要永不终止。</li></ul><h2 id="算法构造：从界定算法的性质、描述算法的伪码、算法构造的过程三部分进行分析"><a href="#算法构造：从界定算法的性质、描述算法的伪码、算法构造的过程三部分进行分析" class="headerlink" title="算法构造：从界定算法的性质、描述算法的伪码、算法构造的过程三部分进行分析"></a>算法构造：从界定算法的性质、描述算法的伪码、算法构造的过程三部分进行分析</h2><p>（一）界定算法的性质：</p><ul><li>算法的定义：算法是一组明确的、可以直接执行之步骤的有限有序集合。</li><li>区分算法内涵与算法描述之间的区别。</li><li>算法的效率与正确性问题：<ul><li>效率是指执行一个算法所要花费的时空代价。</li><li>算法的正确性，则是要确保算法确实解决了给定的问题。目前，证明算法正确性的方法主要有两种途径：软件测试途径、程序正确性证明。</li></ul></li></ul><p>（二）描述算法的伪码</p><ul><li>原语：精确描述算法的形式语言</li><li>伪码：重在表达算法思想的非正式符号系统，既具有直观方便性的优点，又忽略了严格语法的规范性。</li></ul><p>（三）算法构造的过程</p><p>从算法发现的角度看，可以将解决问题的一般原理对应到如下这样四个阶段上：</p><ul><li>阶段1：理解问题</li><li>阶段2：寻找一个可能解决问题的算法过程</li><li>阶段3：阐明算法并且用<em>程序</em>将其表达出来</li><li>阶段4：从准确度以及作为解决其他问题的一个工具的潜力这两个方面来评估这个程序</li></ul><h2 id="算法结构"><a href="#算法结构" class="headerlink" title="算法结构"></a>算法结构</h2><ul><li>选择结构：一般采用条件语句。选择结构本身不会增加计算复杂性。</li><li>迭代结构：一组指令以循环方式重复执行。如果表的长度为n的话，那么平均需要计算n/2计算步，因此算法的计算复杂性为O（n）。</li><li>递归结构：通过将一组指令当作自身的一个子程序进行调用来进行的。如果表的长度为n的话，那么平均需要计算的递归深度为log2n，因此算法的计算复杂性为O（log2n）</li></ul><h1 id="二、自动导航"><a href="#二、自动导航" class="headerlink" title="二、自动导航"></a>二、自动导航</h1><h2 id="目前解决机器人自动导航问题的主要环节大致有："><a href="#目前解决机器人自动导航问题的主要环节大致有：" class="headerlink" title="目前解决机器人自动导航问题的主要环节大致有："></a>目前解决机器人自动导航问题的主要环节大致有：</h2><ul><li><p>地图构建：明确机器人活动范围的整体路线及其各种坐标参考标志物</p></li><li><p>定位：通过一定的检测手段来获取机器人在空间中的位置、方向、环境信息，并据此建立动态环境模型</p></li><li><p>路径规划：寻找最优或极优无障路径</p><blockquote><p>引导机器人安全移动到达目的地</p></blockquote></li><li><p>躲避障碍：给出灵活躲避障碍的策略，特别是非固定障碍的躲避策略。</p></li></ul><h2 id="机器人自动导航目前主要采用的方法包括："><a href="#机器人自动导航目前主要采用的方法包括：" class="headerlink" title="机器人自动导航目前主要采用的方法包括："></a>机器人自动导航目前主要采用的方法包括：</h2><ul><li>基于预先保存的地图进行导航，主要采用路径跟踪与避障技术来完成导航任务。</li><li>通过动态创建的地图进行导航，需要<strong>利用各种传感器</strong>来获取环境与距离信息，<strong>动态</strong>建立即时环境的几何模型或拓扑地图，然后引导机器人导航任务的完成。</li><li>无地图试探性导航，利用对环境信息的<strong>实时检测技术</strong>来获取各种对周边环境物体的识别，作为导航依据。</li></ul><h1 id="三、机器歌舞"><a href="#三、机器歌舞" class="headerlink" title="三、机器歌舞"></a>三、机器歌舞</h1><h2 id="具体地说，为了完成机器歌舞，要实现六个核心模块的构建及其实现工作："><a href="#具体地说，为了完成机器歌舞，要实现六个核心模块的构建及其实现工作：" class="headerlink" title="具体地说，为了完成机器歌舞，要实现六个核心模块的构建及其实现工作："></a>具体地说，为了完成机器歌舞，要实现六个核心模块的构建及其实现工作：</h2><ul><li><strong>音乐解析模块</strong>主要负责对音乐中所包含的节奏、旋律等信息的解析。</li><li><strong>音乐情感检测和标注模块</strong>是在音乐特征分析的基础上，通过引入情感模型，并采用情感检测算法，实现对音乐情感的检测和情感的自动标注，为<strong>音乐与舞蹈动作匹配模块</strong>提供有用的信息资源。</li><li><strong>舞蹈动作关联分析模块</strong>实在拥有大量特征舞蹈单元的原始动作库基础上，依据音乐的情感特征对各特征单元进行动作风格分类，并对属性和关联性做进一步的研究，分析归纳若干舞蹈动作关联约束，并据此将动作中所有动作单元组织成一张有向网，为系统快速有效的进行舞蹈编排做铺垫。</li><li><strong>音乐舞蹈匹配模块</strong>是以音乐情感特征标注文件以及舞蹈动作序列属性描述文件作为输入，综合考虑音乐的情感特征和舞蹈动作序列的情感属性，利用相应的舞蹈动作选择编排最优算法。最终生成完整的且与音乐内涵最吻合的舞蹈动作序列。</li><li><strong>动漫人物展示模块</strong>主要负责对音乐的情感内涵、语音以及舞蹈动作进行同步表达，主要以舞蹈的形式并伴有姿态语言和面部表情。</li><li><strong>歌舞动作控制模块</strong>主要负责智能机器人歌舞动作的实时控制与协调，保证机器人舞蹈动作的连贯性、平衡性和可观赏性。</li></ul><p><em>机器歌舞自主创作的主要问题并不在能否产生规定的动作序列，而在于机器人创作的序列动作前后是否具有动作的连贯性、风格的一致性和表演的艺术性。</em></p><blockquote><p>写的真好啊！</p></blockquote><h2 id="目前，仿人机器人歌舞存在的主要问题是"><a href="#目前，仿人机器人歌舞存在的主要问题是" class="headerlink" title="目前，仿人机器人歌舞存在的主要问题是"></a>目前，仿人机器人歌舞存在的主要问题是</h2><ul><li>没有考虑人类歌舞专业人员学习和创作歌舞的规律</li><li>仅仅学习歌舞动作本身，而不是像人类歌舞专业人员一样通过想象来创新歌舞动作</li><li>没有考虑歌舞创新和传承之间的平衡问题</li><li>缺乏一种通用的仿人机器人歌舞智能学习与创作模型，可以应用于任意仿人机器人硬件平台上完成优美歌舞的学习和创作。</li></ul><h1 id="四、脑机接口"><a href="#四、脑机接口" class="headerlink" title="四、脑机接口"></a>四、脑机接口</h1><h2 id="脑机接口技术主要包括两种不同类型的研究工作："><a href="#脑机接口技术主要包括两种不同类型的研究工作：" class="headerlink" title="脑机接口技术主要包括两种不同类型的研究工作："></a>脑机接口技术主要包括两种不同类型的研究工作：</h2><ul><li><p>Type1：实时采集大规模的脑活动信息用以控制人工制作的设备</p></li><li><p>Type2：用人工产生的电信号刺激脑组织，将特定的感知信息直接传给人大脑。</p><blockquote><p>本章着重介绍第一种类型</p></blockquote></li></ul><h2 id="可以用于脑机接口的脑电信号主要包括："><a href="#可以用于脑机接口的脑电信号主要包括：" class="headerlink" title="可以用于脑机接口的脑电信号主要包括："></a>可以用于脑机接口的脑电信号主要包括：</h2><ul><li><p>脑电节律波（EEG）</p></li><li><p>诱发电位或事件相关电位（ERP）</p></li><li><p>神经元电脉冲信号</p><blockquote><p>前两种通过脑电仪采集，后一种采用内值微电极来获取。</p><p>考虑到内置微电机的损伤性，因此一般都采用脑电仪作为脑机接口的主要工具。</p></blockquote></li></ul><h2 id="一般脑机接口涉及到五个不同功能模块的实现："><a href="#一般脑机接口涉及到五个不同功能模块的实现：" class="headerlink" title="一般脑机接口涉及到五个不同功能模块的实现："></a>一般脑机接口涉及到五个不同功能模块的实现：</h2><ul><li><p>脑电信号的采集：设计脑电仪电极分布模式，使脑电仪最有效的采集所需信号。</p></li><li><p>脑电信号的预处理：滤波方法，提高信噪比</p><blockquote><p>通俗点说，去除无关信号，保留强化有效信号</p></blockquote></li><li><p>特征提取：根据信号特点，针对具体任务，给出面向任务的特征描述向量，并从信号中提取具体的特征向量值。</p></li><li><p>模式识别：根据特征向量值，分析，的而出脑电模式类别。</p><blockquote><p>支持向量机，线性判别分析，人工神经网络，似乎就是一个分类问题</p></blockquote></li><li><p>实施控制：根据获得的含义理解（模式识别结果），实时控制机器完成相应功能。</p></li></ul><h2 id="国内外开发的著名脑机接口系统"><a href="#国内外开发的著名脑机接口系统" class="headerlink" title="国内外开发的著名脑机接口系统"></a>国内外开发的著名脑机接口系统</h2><ul><li>德国柏林脑机接口系统</li><li>美国Wadsworth中心的脑机接口系统</li><li>奥地利craz大学的脑机接口系统</li><li>思维翻译机</li><li>清华大学脑机接口系统</li><li>浙江大学猴子意念控制系统</li></ul><h1 id="五、知觉组织"><a href="#五、知觉组织" class="headerlink" title="五、知觉组织"></a>五、知觉组织</h1><h2 id="整体知觉组织规律："><a href="#整体知觉组织规律：" class="headerlink" title="整体知觉组织规律："></a><em>整体知觉组织规律：</em></h2><ul><li>接近律：视觉更容易根据部分彼此之间的临近或接近关系而组合起来，并得出整体形象。</li><li>相似律：具有某种特征（形状、颜色等）相似的项目，不被接近因素掩盖，则倾向于联合在一起。</li><li>连续律：如果一套点子中有些点显得连续或者完成一个有规律的系列，或拓展成一条简单的曲线，则这些点更容易组织起来，联合在一起。</li><li>封闭律：各种视觉组织律会产生竞争甚至冲突，此时最终知觉的结果形象往往取决于哪种因素更为重要了，其中封闭的图案往往有较大优势。</li><li>简单律：在其它因素相同时，人们将把视觉对象看成有组织的<strong>简单规则图形。</strong></li></ul><h1 id="六、人类运动程序"><a href="#六、人类运动程序" class="headerlink" title="六、人类运动程序"></a>六、人类运动程序</h1><h2 id="人类运动程序的产生过程："><a href="#人类运动程序的产生过程：" class="headerlink" title="人类运动程序的产生过程："></a>人类运动程序的产生过程：</h2><ul><li>根据运动动机愿望、获得的感觉信息以及人体自身状况，大脑联络皮层产生运动动作的粗略规划</li><li>大脑皮层对粗略规划进行分析、处理与解释，形成更为详细的运动系列</li><li>对运动系列的时空图式进行内部模拟</li><li>驱动运动系列的实施。</li></ul><h1 id="七、智慧城市"><a href="#七、智慧城市" class="headerlink" title="七、智慧城市"></a>七、智慧城市</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>​        智慧城市是指充分借助物联传感网、无线移动网、全球互联网，利用先进的信息技术手段，特别是智能技术，构建城市发展的智慧环境。</p><blockquote><p>智慧城市涉及到智能家居、智能楼宇、路网监控、智能医疗、智能交通、城市管理、城市生态、智能教育与数字生活等诸多领域，其目标就是要形成基于海量信息和智能处理的生活方式、产业发展、社会管理等模式，面向未来构建全新的城市形态。</p></blockquote><h2 id="2-智慧城市的整体框架"><a href="#2-智慧城市的整体框架" class="headerlink" title="2.智慧城市的整体框架"></a>2.智慧城市的整体框架</h2><p>在智慧城市的架构中，无线网、互联网、物联网等<strong>三网一体</strong></p><ul><li>智能家居是智慧城市的<strong>单元</strong></li><li>智能交通、智能医疗、智能楼宇、智能教育、智能能源、智能环境等是智慧城市的<strong>功能实现</strong></li><li>智能识别、移动计算、信息融合、云端计算等则是智慧城市的<strong>关键技术</strong></li></ul><h2 id="3-智慧城市主要特征"><a href="#3-智慧城市主要特征" class="headerlink" title="3.智慧城市主要特征"></a><em>3.智慧城市主要特征</em></h2><p>从技术层面看，智慧城市的主要特征包括：</p><ul><li><p>由传感器和智能终端构成的物联网覆盖整个城市，可以对城市运行的核心系统进行全方位的感知、监控和分析；</p></li><li><p>物联网、移动网、互联网三网融合，为城市智能管理提供有效的信息流通平台；</p></li><li><p>在智能设施的基础上，全面开展智能化政务管理、企业经营、市民生活等创新性开发应用；</p></li><li><p>城市主要核心系统之间实现高效协同运作，实现城市最佳运行状态。如下图所示。</p></li></ul><p>对于物联感知层，为了实现城市有效的物联感知能力，需要射频识别技术、电子传感技术、智能嵌入技术的支撑。</p><p>对于网络通信层，城市网络通信系统应该具备以下主要特性：</p><ul><li>三网融合一体</li><li>移动通信全覆盖</li><li>通信协议全面兼容</li><li>宽带光纤网络</li><li>泛在的物联网</li></ul><p>对于数据服务层，它为各类智慧应用系统提供数据支撑服务。为了有效利用、管理各类数据资源，需要进行<strong>数据融合</strong>和<strong>服务融合</strong>。</p><p>然后，在此基础上就可以开发各类智慧城市的应用系统，即智慧应用层。</p><h2 id="4-智慧城市应用系统"><a href="#4-智慧城市应用系统" class="headerlink" title="4.智慧城市应用系统"></a>4.智慧城市应用系统</h2><blockquote><p>看看对各个应用的解释吧。考试现场编！冲！</p></blockquote><ul><li>智能公共服务</li><li>智能社会管理</li><li>智能企业服务</li><li>智能安居服务</li><li>智能教育服务</li><li>智能文化服务</li><li>智能商务管理</li><li>智能医疗保障</li><li>智能交通系统</li><li>智能农村服务</li><li>智能安防系统</li><li>智能政务管理</li></ul><h2 id="5-智慧城市建设涉及到的主要核心技术"><a href="#5-智慧城市建设涉及到的主要核心技术" class="headerlink" title="5.智慧城市建设涉及到的主要核心技术"></a>5.智慧城市建设涉及到的主要核心技术</h2><blockquote><p>上述列举的建设项目，都需要智能技术等综合核心技术的支持。</p></blockquote><ul><li>智能感知识别技术</li><li>智能移动计算技术</li><li>智能信息融合技术</li></ul><p>另外，由于数据处理规模庞大、关系复杂，需要建立<strong>云计算数据中心</strong>，保证诸功能系统的有效运行。</p><h2 id="6-对海量数据的挖掘分析，需要考虑三个要点步骤"><a href="#6-对海量数据的挖掘分析，需要考虑三个要点步骤" class="headerlink" title="6.对海量数据的挖掘分析，需要考虑三个要点步骤"></a>6.对海量数据的挖掘分析，需要考虑三个要点步骤</h2><blockquote><p>无论是智慧城市架构，还是涉及到具体智能方法，从核心关键实现技术的角度，大<strong>数据及其挖掘分析方法</strong>都是其中信息综合处理中的关键</p></blockquote><ul><li><p>确定数据挖掘的目标，以便采取不同的数据挖掘方法。</p></li><li><p>构造相应的数据挖掘算法，确定模型和参数</p></li><li><p>运用构造的算法具体实施数据挖掘任务，提取有效的知识，并用某种方式表达出来。</p></li></ul><h2 id="7-可供选择的数据挖掘目标及其方法大致分为如下几个方面"><a href="#7-可供选择的数据挖掘目标及其方法大致分为如下几个方面" class="headerlink" title="7.可供选择的数据挖掘目标及其方法大致分为如下几个方面"></a>7.可供选择的数据挖掘目标及其方法大致分为如下几个方面</h2><ul><li><p>数据关联分析</p></li><li><p>自动分类预测</p></li><li><p>数据聚类分析</p></li><li><p>离群异常分析</p></li><li><p>数据演化分析</p></li></ul><h2 id="8-智慧城市的优势、主要作用"><a href="#8-智慧城市的优势、主要作用" class="headerlink" title="8.智慧城市的优势、主要作用"></a>8.智慧城市的优势、主要作用</h2><ul><li><p>能够降低城市运行成本、提高行政效率</p></li><li><p>能够深化公共服务层次、促进政府职能转变</p></li><li><p>政府权力运作公开透明、城市管理客观化</p></li><li><p>各级机构、事业单位高度自治、促进事业发展</p></li><li><p>保障企业创新活力、促进经济增长</p></li><li><p>拓宽信息传播渠道、促进就业</p></li><li><p>引领科技创新、振兴新兴产业</p></li><li><p>改善民生、提升市民生活质量</p></li></ul><h1 id="八、语音识别"><a href="#八、语音识别" class="headerlink" title="八、语音识别"></a>八、语音识别</h1><h2 id="语音识别过程分为三个方面内容："><a href="#语音识别过程分为三个方面内容：" class="headerlink" title="语音识别过程分为三个方面内容："></a>语音识别过程分为三个方面内容：</h2><ul><li>特征提取</li><li>模式匹配</li><li>模型训练</li></ul><h2 id="针对非特定人的语音识别方法大致包括"><a href="#针对非特定人的语音识别方法大致包括" class="headerlink" title="针对非特定人的语音识别方法大致包括"></a>针对非特定人的语音识别方法大致包括</h2><ul><li>隐马尔可夫模型方法，也是语音识别的主流方法</li><li>基于知识（利用构词、句法、语义、会话背景等方面的知识）的语音识别方法，并与大规模语料统计模型相结合；</li><li>神经网络、遗传算法、免疫算法、蚁群算法等自然计算方法。</li></ul><h2 id="根据语音识别目标的不同，语音识别的任务大致分为三类："><a href="#根据语音识别目标的不同，语音识别的任务大致分为三类：" class="headerlink" title="根据语音识别目标的不同，语音识别的任务大致分为三类："></a>根据语音识别目标的不同，语音识别的任务大致分为三类：</h2><ul><li>孤立词识别（isolatedwordrecognition)</li><li>关键词识别（keywordspotting)</li><li>连续语音识别。</li></ul><h2 id="根据发音对象的不同，还可以分为："><a href="#根据发音对象的不同，还可以分为：" class="headerlink" title="根据发音对象的不同，还可以分为："></a>根据发音对象的不同，还可以分为：</h2><ul><li>特定人语音识别</li><li>非特定人语音识别。</li></ul><h2 id="语音识别主要需要解决的五个问题："><a href="#语音识别主要需要解决的五个问题：" class="headerlink" title="语音识别主要需要解决的五个问题："></a>语音识别主要需要解决的五个问题：</h2><ul><li>话语要素的分割问题：将连续的话语分解为词、音素等基本单位</li><li>确定语音模式的区分标准：不同人有不同的语音模式，同一人在不同场合、状态、时期也有不同的语音模式。</li><li>模糊性问题：说话含糊不清，语言中同义词现象，使语音识别成为依赖于上下文与会话背景的复杂研究课题。</li><li>词语发音的动态性：单个字母或词、字的语音特性会受到上下文影响而变化，包括读音、重音、音调、音量、发音速度等方面的改变。</li><li>环境噪音干扰：人类可以在嘈杂环境下排除干扰，但是机器没有有效解决方法。</li></ul><h1 id="九、大脑皮层运动"><a href="#九、大脑皮层运动" class="headerlink" title="九、大脑皮层运动"></a>九、大脑皮层运动</h1><blockquote><p>课本p85，5.1.2，说的挺好的，感觉就是它没错了！</p></blockquote><h2 id="人脑机制——从人脑结构功能定位、神经连接网络、心脑行为自主对人脑机制进行分析："><a href="#人脑机制——从人脑结构功能定位、神经连接网络、心脑行为自主对人脑机制进行分析：" class="headerlink" title="人脑机制——从人脑结构功能定位、神经连接网络、心脑行为自主对人脑机制进行分析："></a>人脑机制——从人脑结构功能定位、神经连接网络、心脑行为自主对人脑机制进行分析：</h2><ul><li><strong>人脑结构功能定位</strong>：任何叶区的功能划分都不会是绝对明确的，确切的功能性叶区边界也是不存在的；并因人而异的。脑功能是分布搭配式的，因此某个功能消失并不一定引起所有功能的丧失。</li><li><strong>神经连接网络</strong>：人脑中的神经系统看作是由神经细胞及其突触联系所构成的一张巨大无比的神经网络。</li><li><strong>心脑行为自主</strong>：心脑行为从根本上讲是神经系统自组织活动本身的外效表现。</li></ul><h2 id="运动神经系统由三个水平的神经结构分级构成，从低到高分别是："><a href="#运动神经系统由三个水平的神经结构分级构成，从低到高分别是：" class="headerlink" title="运动神经系统由三个水平的神经结构分级构成，从低到高分别是："></a>运动神经系统由三个水平的神经结构分级构成，从低到高分别是：</h2><ul><li><p>脊髓：最低水平的运动控制结构</p></li><li><p>脑干的下行系统：包括内测和外侧两个部分。</p></li><li><p>大脑皮层的运动区：详细说明见下一点</p><blockquote><p>在整个运动神经系统中，大脑皮层可以通过脑干下行系统来对脊髓进行间接控制。</p></blockquote></li></ul><h2 id="大脑皮层运动区的详细说明"><a href="#大脑皮层运动区的详细说明" class="headerlink" title="大脑皮层运动区的详细说明"></a>大脑皮层运动区的详细说明</h2><p>大脑运动皮层为运动制定正确策略。通过各种感觉传入，来获得外界物体在空间中相互关系的信息。</p><p>大脑皮层运动区是运动控制的最高水平中枢，大致构成包括有：</p><ul><li><p>初级运动皮层</p></li><li><p>外侧前运动皮层或前运动区</p></li><li><p>辅助运动区</p><blockquote><p>后两个部分均有神经纤维投射到初级运动皮层。而三个部分则均直接投射至脊髓或经脑干下行系统影响脊髓。</p></blockquote></li></ul><h1 id="十、知觉-视觉感知"><a href="#十、知觉-视觉感知" class="headerlink" title="十、知觉/视觉感知"></a>十、知觉/视觉感知</h1><h2 id="从视觉神经通路、知觉组织规律、视觉感知经验三方面阐述："><a href="#从视觉神经通路、知觉组织规律、视觉感知经验三方面阐述：" class="headerlink" title="从视觉神经通路、知觉组织规律、视觉感知经验三方面阐述："></a>从视觉神经通路、知觉组织规律、视觉感知经验三方面阐述：</h2><ul><li><p>视觉神经通路：在视觉通路中，各层次神经细胞普遍是以相互作用的方式进行通信的。整个视觉通路中的神经联接和排列方式，决定了具有引起神经细胞活动方式的视觉刺激或辩认。</p></li><li><p>知觉组织规律：格式塔心理学派将反映这种整体知觉的规律归纳为一些普遍性规则，称为知觉组织律。整体知觉的组织规律还其他一些规律，分别是：接近律、相似律、连续律、封闭律、简单律。</p></li><li><p>视觉感知经验：人类所具备的视觉恒常性和容错性，难以为机械精确、永远无错的算法方式所描述。</p></li></ul><h2 id="视觉感知经验"><a href="#视觉感知经验" class="headerlink" title="视觉感知经验"></a>视觉感知经验</h2><ul><li>恒常性：主要来自于经验和比较    </li><li>容错性：有时我们的视觉会得出错误的结论，产生幻觉或错觉。因为经验导致的错觉，人类的视觉不会因为错觉而否认经验，因为经验是人类赖以生存的基础。</li></ul><h1 id="十一、机器人社会行为"><a href="#十一、机器人社会行为" class="headerlink" title="十一、机器人社会行为"></a>十一、机器人社会行为</h1><h2 id="下面列举了一些机器人应该学会的最基本社会行为，这样可以增加机器人的社交能力。"><a href="#下面列举了一些机器人应该学会的最基本社会行为，这样可以增加机器人的社交能力。" class="headerlink" title="下面列举了一些机器人应该学会的最基本社会行为，这样可以增加机器人的社交能力。"></a>下面列举了一些机器人应该学会的最基本社会行为，这样可以增加机器人的社交能力。</h2><ul><li>身份认知：机器人从中学会在当事与非当事人的身份转换。</li><li>讨回物品：当A把物体扔给B时，机器人会走向B并将物体要回。</li><li>冻结身份：在身份转换时，机器人必须静止不动（“冻结”）直到身份确定。</li><li>引导他人：机器人引导他人开展活动。</li><li>寻找物品：寻找被他人占有的物品，尝试去向他们索要该物品。</li></ul><h1 id="十二、视觉计算理论"><a href="#十二、视觉计算理论" class="headerlink" title="十二、视觉计算理论"></a>十二、视觉计算理论</h1><h2 id="视觉计算的过程"><a href="#视觉计算的过程" class="headerlink" title="视觉计算的过程"></a>视觉计算的过程</h2><ul><li>图像获取：通过某种视觉图像采集设备，比如相机、遥感仪、雷达等，获取二维、三维或者图像序列</li><li>预处理：对于获取的图像，进行各种滤波、矫正处理，使质量更好，效果更佳</li><li>特征提取：根据研究目标不同，获取描述图像的各种基本要素，比如边缘与线条、区域与纹理、深度与运动信息等，属于低层信息处理阶段。</li><li>区域分割：对获取的<strong>特征集合</strong>初步整合，将图像分割成各个有机组成部分，属于中层信息处理阶段。</li><li>高级处理：或对图像分类、或理解图像含义、或进行景物分析或识别视觉目标、或跟踪视觉目标，都需要不同的高级计算处理，属于高层信息处理阶段</li></ul><p>如果不考虑视觉图像的获取与预处理，那么上述的后三个步骤构成了视觉计算的主要三个环节：</p><ul><li>差异性信息检测：确定局部性质，灰度、梯度、速度等</li><li>相似性参数分析：确定几何属性，边界、区域、纹理等</li><li>综合性含义理解：确定语义关系，描述、匹配、推理等</li></ul><h2 id="马尔视觉计算理论"><a href="#马尔视觉计算理论" class="headerlink" title="马尔视觉计算理论"></a>马尔视觉计算理论</h2><blockquote><p>9-景物理解-2-马尔视觉计算理论</p></blockquote><blockquote><p>机器要实现三维景物的理解计算，首先必须要给出可以进行<strong>形式化表征</strong>的计算策略和方法。</p><p>马尔认为，视觉感知首先是一个<strong>信息处理过程</strong>，是要从图像中发现外部世界中有什么以及处在什么位置。</p><p>因此，视觉对象的<strong>内部表征</strong>就成为视觉计算的主要载体。</p><p>于是视觉计算任务就成为如何<strong>根据给定的图像，来获取个层次的内部表征，直至恢复图像的三维景物。</strong></p></blockquote><h3 id="马尔从三个层次建立视觉计算理论："><a href="#马尔从三个层次建立视觉计算理论：" class="headerlink" title="马尔从三个层次建立视觉计算理论："></a>马尔从三个层次建立视觉计算理论：</h3><ul><li>计算理论：确定视觉计算的目的</li><li>表征与算法：如何实现视觉计算任务，确定输入输出的表征，给出不同表征之间转换的算法。t</li><li>硬件实现：在物理上如何实现视觉表征及其转换算法。</li></ul><h3 id="第二个层次是视觉计算理论的核心内容，为此，马尔提出了具体的四级表征"><a href="#第二个层次是视觉计算理论的核心内容，为此，马尔提出了具体的四级表征" class="headerlink" title="第二个层次是视觉计算理论的核心内容，为此，马尔提出了具体的四级表征"></a>第二个层次是视觉计算理论的核心内容，为此，马尔提出了具体的四级表征</h3><ul><li>图像：表达光强，用像素表征</li><li>要素图：表达二维图像中的重要变化信息及其分布。比如边界、不连续点、斑点、有效线段、边缘片段等。</li><li>2.5维图：在<strong>以观察者为中心的坐标系</strong>中，将可见朝向、大致深度及其不连续轮廓表达清楚。比如表面要素的朝向、距离观察者的深度、深度上不连续点、表面朝向不连续点等。</li><li>3维模型：在<strong>以物体为中心的坐标系</strong>中，景物用体积基元和面积基元给出的层次模块化表征。</li></ul><h3 id="对上述各个层次表征的获取，正好对应视觉计算不同步骤的计算分析处理阶段，涉及到："><a href="#对上述各个层次表征的获取，正好对应视觉计算不同步骤的计算分析处理阶段，涉及到：" class="headerlink" title="对上述各个层次表征的获取，正好对应视觉计算不同步骤的计算分析处理阶段，涉及到："></a>对上述各个层次表征的获取，正好对应视觉计算不同步骤的计算分析处理阶段，涉及到：</h3><ul><li>图形检测、运动检测、空间检测、分形检测等<strong>差异性低层处理技术</strong></li><li>边线合成、区域生成、纹理识别、表面恢复等<strong>相似性中层处理技术</strong></li><li>景物匹配、含义推断、知识习得、目标规划等<strong>理解性高层处理技术。</strong></li></ul><h1 id="十三、视觉选择性注意机制"><a href="#十三、视觉选择性注意机制" class="headerlink" title="十三、视觉选择性注意机制"></a>十三、视觉选择性注意机制</h1><h2 id="人类视觉活动复杂，特别是主观经验也会决定人类视觉结果"><a href="#人类视觉活动复杂，特别是主观经验也会决定人类视觉结果" class="headerlink" title="人类视觉活动复杂，特别是主观经验也会决定人类视觉结果"></a>人类视觉活动复杂，特别是主观经验也会决定人类视觉结果</h2><p>​        相对于机器而言，人类有着复杂的视觉活动能力。</p><p>​        人类在眼睛收受信息时，并非对环境中所接触到的一切刺激特征全盘接收的。根本原因就是人类所获取的视觉信息、所获得的视觉经验，都是主动选择性的。</p><blockquote><p>写的真好！</p></blockquote><h2 id="由此得出结论——人类对物体的知觉，不能仅仅通过对物体各组成要素的感知把握，还需要一个整体概念做指导。"><a href="#由此得出结论——人类对物体的知觉，不能仅仅通过对物体各组成要素的感知把握，还需要一个整体概念做指导。" class="headerlink" title="由此得出结论——人类对物体的知觉，不能仅仅通过对物体各组成要素的感知把握，还需要一个整体概念做指导。"></a>由此得出结论——人类对物体的知觉，不能仅仅通过对物体各组成要素的感知把握，还需要一个整体概念做指导。</h2><p>​        很明显，对于一个物体的知觉，必须通过对这一物体的各组成要素进行感知把握之后才能完成；然而如果在感知把握时，没有一个整体的概念作指导，那么对这个物体的知觉就连一步也不能深入下去。</p><p>​        观察者能看见什么，不仅取决于外界呈现的视觉刺激，还取决于他主观的注意。外界刺激只有在主观意识活动的参与下，才能形成视觉形象的显现。</p><h2 id="人类视觉的主动性有两个作用，除了上述描述的“主动选择发现线索”外，还有一个重要特点是主观意念并非总是唯一。"><a href="#人类视觉的主动性有两个作用，除了上述描述的“主动选择发现线索”外，还有一个重要特点是主观意念并非总是唯一。" class="headerlink" title="人类视觉的主动性有两个作用，除了上述描述的“主动选择发现线索”外，还有一个重要特点是主观意念并非总是唯一。"></a>人类视觉的主动性有两个作用，除了上述描述的“主动选择发现线索”外，还有一个重要特点是主观意念并非总是唯一。</h2><p>​        当然，在这种主观意念起作用的情况中，除了视觉会主动有选择地去“发现”线索以构成有意义的整体感知外，还有一个重要的特点就是主观意念往往并非总是唯一的，</p><h2 id="机器视觉的不足"><a href="#机器视觉的不足" class="headerlink" title="机器视觉的不足"></a>机器视觉的不足</h2><p>​        遗感的是，通过运动序列图像的分析和跟踪，机器确实可以去选择有效的线索，但由于机器缺乏主观意向性，因此主观意念就将成为机器视觉的真正困境。</p><h2 id="作者试探性的给出了一种动态场景主动理解的视觉计算模型"><a href="#作者试探性的给出了一种动态场景主动理解的视觉计算模型" class="headerlink" title="作者试探性的给出了一种动态场景主动理解的视觉计算模型"></a>作者试探性的给出了一种动态场景主动理解的视觉计算模型</h2><p>​        目前机器视觉系统的构建，主要都是建立在视觉信息处理的bottom-up策略之上的，如马尔的计算理论那样，很少运用人类视觉经验的top-down策略。</p><p>​        为了弥补这样的不足，<strong>构建未来的机器视觉系统，我们可以依赖人类视觉认知机制的研究成果，引入联想觉知机制，形成一种具有觉知能力的视觉感知动态计算模型</strong></p><h2 id="以下是按照如上构想提出的视觉动态觉知的计算模型"><a href="#以下是按照如上构想提出的视觉动态觉知的计算模型" class="headerlink" title="以下是按照如上构想提出的视觉动态觉知的计算模型"></a>以下是按照如上构想提出的视觉动态觉知的计算模型</h2><div align=center><img src="https://cdn.jsdelivr.net/gh/Chen-Wang-JY/pictures@main/img/202201061112654-一种视觉动态觉知模型.png" style="zoom: 67%;" /></div><p>​        </p><p>​        在该模型中，除了必须的Bottom-Up视觉加工处理外，主要加入了体现top-down计算策略的“联想记忆”和“整体觉知”模块。然后将Bottom-Up和top-down两者加工策略相汇合，整合形成实时动态场景中关注对象觉知，从而解决动态场景的视觉计算问题。</p><h2 id="作者总结"><a href="#作者总结" class="headerlink" title="作者总结"></a>作者总结</h2><p>​        景物理解的主动视觉，特别是主观意念参与的知觉过程是与人类整个心智能力，包括意识、情感、经验等等在内的机能密不可分，而其中的视觉选择性注意是人类视觉系统能够开展主动感知活动的基础。因此，希望机器视觉也能够部分地模仿人类景物理解能力，首先必须解决主动视觉机制的计算实现问题。我们期待有朝一日，在机器主动视觉的计算模型及其系统应用方面，有长足的进步。</p>]]></content>
    
    
    <categories>
      
      <category>课程相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CUMT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/12/hello-world/"/>
    <url>/2021/12/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
